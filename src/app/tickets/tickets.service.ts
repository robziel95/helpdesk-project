import { Injectable } from '@angular/core';
import { Ticket } from './ticket.model';
import { Subject } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class TicketsService {
  private tickets: Ticket [] = [];
  private ticketsUpdated = new Subject<Ticket[]>();

  constructor(private http: HttpClient, private router: Router) { }

  addTicket(inputTicket: Ticket){
    const newTicket: Ticket = inputTicket;
    this.http.post<{message: string, ticketId: string}>('http://localhost:3000/api/tickets', newTicket)
    .subscribe(
      (responseData) => {
        //update id with the one generated by mongo
        const generatedTicketId = responseData.ticketId;
        newTicket.id = generatedTicketId;
        this.tickets.push(newTicket);
        this.ticketsUpdated.next([...this.tickets]);
        //push only on success
        this.router.navigate(['/tickets']);
      }
    );
  }

  getTickets(){
    this.http.get<{message: string, tickets: any}>('http://localhost:3000/api/tickets')
    //pipe changes _id into id
    .pipe(map(
      (ticketData) => {
        return ticketData.tickets.map(ticket => {
          return{
            id: ticket._id,
            title: ticket.title,
            priority: ticket.priority,
            description: ticket.description
          };
        });
      }
    ))
    .subscribe(
      //update transformed data after map
      (transformedTicketData) => {
        this.tickets = transformedTicketData;
        this.ticketsUpdated.next([...this.tickets]);
        //return by copy
      }
    );
  }

  getTicket(id: string){
    return this.http.get<{_id: string; title: string; priority: string; description: string;}>('http://localhost:3000/api/tickets/' + id);
  }

  getTicketsUpdateListener(){
    return this.ticketsUpdated.asObservable();
  }

  updateTicket(inputTicket: Ticket){
    const ticketToUpdate: Ticket = {
      id: inputTicket.id,
      title: inputTicket.title,
      priority: inputTicket.priority,
      description: inputTicket.description
    };

    this.http.put('http://localhost:3000/api/tickets/' + ticketToUpdate.id, ticketToUpdate).subscribe(
      (response) => {
        const ticketsUpdate = [...this.tickets];
        const ticketArrayIndex = ticketsUpdate.findIndex( ticket => ticket.id === ticketToUpdate.id);
        ticketsUpdate[ticketArrayIndex] = ticketToUpdate;
        this.tickets = ticketsUpdate;
        this.ticketsUpdated.next([...this.tickets]);
        this.router.navigate(['/tickets']);
      }
    );
  }

  deleteTicket(ads: any){

  }
}
